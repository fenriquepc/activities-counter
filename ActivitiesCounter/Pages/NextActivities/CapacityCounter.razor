@using ActivitiesCounter.Utils;
@inject ActivitiesManager ActivitiesManager;
@inject IJSRuntime JS;

<div style="text-align: right">
	<Tooltip Text="@TooltipText">
		<span class="capacity-counter" @onclick="ShowAddParticipant" @oncontextmenu="ShowParticipants" @oncontextmenu:preventDefault="true">
				
			@AvailableCapacity / @Activity.Capacity

			@if (LastPlaces)
			{
				<span><i class="fa-brands fa-hotjar hot" /></span>
			}

			<div class="collapse add-participant @(_showAddParticipants ? "show" : "")" id="@($"add-participants{Activity.Id}")" onclick="event.stopPropagation();">
				<div class="card fs-5">
					<div class="card-body">
						<InputText placeholder="Nombre del nuevo participante" @ref="_participantNameInput"
									@bind-Value="_newParticipantName" @onkeyup="OnKeyUp" @onfocusout="HideCollapse" />
					</div>
				</div>
			</div>

		</span>
	</Tooltip>
</div>

@code {
	[CascadingParameter] public IModalService ModalService { get; set; }
	[Parameter] public Activity Activity { get; set; }

	private bool LastPlaces => Activity.AvailableCapacity < 3;

	private InputText _participantNameInput;
	private bool _showAddParticipants = false;
	private string _newParticipantName = string.Empty;
	private IModalReference _modal;
	private string TooltipText => Activity.HasOpenInscriptions ? "Añadir participante" : "Inscripciones cerradas";
	private string AvailableCapacity => Activity.HasOpenInscriptions ? Activity.AvailableCapacity.ToString() : "-";

	private async Task ShowAddParticipant()
	{
		if (!Activity.HasOpenInscriptions)
			return;

		await JS.InvokeAsync<object>("Collapse", $"add-participants{Activity.Id}");
		await _participantNameInput.Element.Value.FocusAsync();
	}

    private async Task ShowParticipants()
    {
		var parameters = new ModalParameters()
			.Add(nameof(Participants.Activity), Activity);

		_modal = ModalService.Show<Participants>($"Participantes de {Activity.Name}", parameters, new()
			{
				Position = ModalPosition.Middle
			});

		await _modal.Result;
		await ActivitiesManager.UpsertActivityAsync(Activity);
	}

	private async Task OnKeyUp(KeyboardEventArgs e)
	{
		if (e.Code != "Enter" && e.Code != "NumpadEnter")
			return;

		await ActivitiesManager.AddParticipantAsync(Activity, _newParticipantName);
		await HideCollapse();
	}

	private async Task HideCollapse()
	{
		_newParticipantName = string.Empty;
		await JS.InvokeAsync<object>("Collapse", $"add-participants{Activity.Id}");
	}
}
