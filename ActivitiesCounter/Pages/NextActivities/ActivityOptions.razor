@using ActivitiesCounter.Components
@inject ActivitiesManager ActivitiesManager

<div class="activity-options">
	<HxDropdown>
		<HxDropdownToggleElement role="button">
			<i class="fa-solid fa-gear options-button"></i>
		</HxDropdownToggleElement>
		<HxDropdownMenu>
			<HxDropdownItem OnClick="EditActivity">
				<i class="fa-regular fa-pen-to-square"></i>
				Editar actividad
			</HxDropdownItem>
			<HxDropdownItem OnClick="ShowParticipants">
				<i class="fa-solid fa-user-gear"></i>
				Detalles de participantes
			</HxDropdownItem>
			<HxDropdownItem OnClick="Remove">
				<i class="fa-solid fa-trash-can"></i>
				Borrar actividad
			</HxDropdownItem>
		</HxDropdownMenu>
	</HxDropdown>
</div>

@code {
	[CascadingParameter]
	public IModalService ModalService { get; set; } = default!;

	[CascadingParameter]
	private Activity Activity { get; set; }

	[CascadingParameter(Name = "ActivitiesChanged")]
	private Action ActivitiesChanged { get; set; }

	private IModalReference _modal;

	private async Task EditActivity()
	{
		var parameters = new ModalParameters()
			.Add(nameof(Pages.EditActivity.Activity), Activity);

		_modal = ModalService.Show<EditActivity>("Editar actividad", parameters, new()
			{
				Position = ModalPosition.Middle,
			});

		var result = await _modal.Result;
		if (result.Confirmed)
		{
			Activity = result.Data as Activity;
			ActivitiesChanged();
		}

		_modal.Close();
	}

	private void ShowParticipants()
	{
		var parameters = new ModalParameters()
			.Add(nameof(Participants.Activity), Activity);

		_modal = ModalService.Show<Participants>($"Participantes de {Activity.Name}", parameters, new()
			{
				Position = ModalPosition.Middle
			});
	}

	private async Task Remove()
	{
		var parameters = new ModalParameters()
			.Add(nameof(ConfirmModal.Message), "¿Seguro que quieres borrar la actividad?");

		_modal = ModalService.Show<ConfirmModal>("Confirmar borrado", parameters, new()
			{
				Position = ModalPosition.Middle,
			});

		var result = await _modal.Result;
		if (result.Confirmed)
		{
			await ActivitiesManager.RemoveActivityAsync(Activity);
			ActivitiesChanged();
		}

		_modal.Close();
	}
}
