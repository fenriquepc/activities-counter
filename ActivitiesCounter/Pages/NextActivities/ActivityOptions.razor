@inject ActivitiesManager ActivitiesManager

<div class="activity-options">
	<HxDropdown>
		<HxDropdownToggleElement role="button">
			<i class="fa-solid fa-gear options-button"></i>
		</HxDropdownToggleElement>
		<HxDropdownMenu>
			<HxDropdownItem OnClick="ShowModal">
				<i class="fa-regular fa-pen-to-square"></i>
				Editar actividad
			</HxDropdownItem>
			<HxDropdownItem>
				<i class="fa-solid fa-user-gear"></i>
				Detalles de participantes
			</HxDropdownItem>
			<HxDropdownItem OnClick="Remove">
				<i class="fa-solid fa-trash-can"></i>
				Borrar actividad
			</HxDropdownItem>
		</HxDropdownMenu>
	</HxDropdown>
</div>

@code {
	[CascadingParameter]
	public IModalService ModalService { get; set; } = default!;

	[CascadingParameter]
	private Activity Activity { get; set; }

	[CascadingParameter(Name ="ActivityChanged")]
	private Action ActivityChanged { get; set; }

	[CascadingParameter(Name = "ActivitiesChanged")]
	private Action ActivitiesChanged { get; set; }

	private IModalReference _modal;

	private void ShowModal()
	{
		var parameters = new ModalParameters()
			.Add(nameof(EditActivity.Activity), Activity)
			.Add(nameof(EditActivity.Callback), () =>
			{
				ActivityChanged();
				_modal.Close();
			});
		var options = new ModalOptions()
		{
			Position = ModalPosition.Middle,
		};

		_modal = ModalService.Show<EditActivity>("Editar actividad", parameters, options);
	}

	private void Remove()
	{
		var parameters = new ModalParameters()
			.Add(nameof(ConfirmDialog.Message), "¿Seguro que quieres borrar la actividad?")
			.Add(nameof(ConfirmDialog.ConfirmCallback), async () => {
				await ActivitiesManager.RemoveActivityAsync(Activity);
				ActivitiesChanged();
				_modal.Close();
			})
			.Add(nameof(ConfirmDialog.CancelCallback), () => _modal.Close());

		_modal = ModalService.Show<ConfirmDialog>("Confirmar borrado", parameters, new()
			{
				Position = ModalPosition.Middle,
			});
	}
}
