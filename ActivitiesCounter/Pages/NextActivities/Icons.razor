@implements IDisposable
<span class="icons">

	@if (OpenSoon)
	{
		<Tooltip Text="Inscripciones apunto de abrirse">
			<i class="fa-solid fa-clock fa-shake"></i>
		</Tooltip>
	}

	@if (RecentlyOpen)
	{
		<Tooltip Text="Inscripciones ya abiertas">
			<i class="fa-solid fa-burst fa-fade"></i>
		</Tooltip>
	}

	@if (AdultsOnly)
	{
		<Tooltip Text="Solo para mayores de edad">
			<span class="fa-layers fa-fw adults-only">
				<i class="fa-solid fa-ban"></i>
				<span class="fa-layers-text fa-inverse" data-fa-transform="shrink-8" style="font-weight:900">18</span>
			</span>
		</Tooltip>
	}

	@switch (Activity.Type)
	{
		case ActivityType.RPG:
				<Tooltip Text="Rol">
					<i class="fa-solid fa-dice-d20"></i>
				</Tooltip>
			break;
		case ActivityType.BoardGame:
				<Tooltip Text="Juegos de mesa">
					<i class="fa-solid fa-dice"></i>
				</Tooltip>
			break;
		case ActivityType.LARP:
				<Tooltip Text="Rol en vivo">
					<i class="fa-solid fa-masks-theater"></i>
				</Tooltip>
			break;
	}
</span>

@code {
	[CascadingParameter]
	public Activity Activity { get; set; }

	[CascadingParameter(Name = "ActivitiesChanged")]
	private Action ActivitiesChanged { get; set; }

	private Timer _timer;
	private bool AdultsOnly => Activity.AdultsOnly;
	private bool InscriptionsOpen => Activity.HasOpenInscriptions;
	private DateTime OpenInscriptionsTime => Activity.OpenInscriptionTime;
	private bool OpenSoon => !InscriptionsOpen && OpenInscriptionsTime.AddMinutes(-10) < DateTime.Now;
	private bool RecentlyOpen => InscriptionsOpen && !Activity.AllowPreinscription && OpenInscriptionsTime.AddMinutes(10) > DateTime.Now;

	private bool _previousOpenSoon;
	private bool _previousRecentlyOpen;

	protected override void OnInitialized()
	{
		_timer = new Timer(OnTimeChanged, null, 0, 5000);
		_previousOpenSoon = OpenSoon;
		_previousRecentlyOpen = RecentlyOpen;
	}

	public void Dispose()
	{
		_timer?.Dispose();
	}

	private void OnTimeChanged(object _)
	{
		var changes = false;

		if (_previousOpenSoon != OpenSoon)
		{
			_previousOpenSoon = OpenSoon;
			changes = true;
		}

		if (_previousRecentlyOpen != RecentlyOpen)
		{
			_previousRecentlyOpen = RecentlyOpen;
			changes = true;
		}

		if (changes)
			StateHasChanged();

		if (Activity.IsElapsed)
		{
			_timer.Dispose();
			ActivitiesChanged();
		}
	}
}
